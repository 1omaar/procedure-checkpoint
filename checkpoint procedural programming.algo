//procedure DOT_Product of first algorithm
PROCEDURE DOT_Product(n: INTEGER,VAR v1,v2: ARRAY_OF FLOAT[50], VAR ps:FLOAT)
VAR
    i:INTEGER; 
BEGIN
    i:=0;
    FOR i FROM 0 TO n-1 STEP i++  DO
        read(v1[i]);
        read(v2[i]);
    END_FOR
    i:=0;
 FOR i FROM 0 TO n-1 STEP i++  DO
    ps:=ps+v1[i]*v2[i];
    write(ps);
END
//algorithm produit scalaire
ALGORITHM orthogonality
VAR
    v1,v2 : ARRAY_OF FLOAT[50];
    ps:FLOAT:
    n:INTEGER
BEGIN
    IF (n%2=0) THEN
        read(n);
    ELSE
        writh("enter n pair of vectors");
    END_IF
    write("please enter n pair of vector");
    read(n);
    IF (DOT_Product(v1,v2,n,ps):=0) THEN
        write("les deux vecteurs sont orthogonaux");
    ELSE
        write("les deux vecteurs ne sont pas orthogonaux");
    END_IF
END
//function DOT_product of second algorithm
FUNCTION DOT_Product(n:INTEGER, VAR v1,v2:ARRAY_OF FLOAT[50]) : FLOAT
VAR
    i:INTEGER; 
BEGIN
    i:=0;
    FOR i FROM 0 TO n-1 STEP i++  DO
        read(v1[i]);
         read(v2[i]);
    END_FOR
    i:=0;
 FOR i FROM 0 TO n-1 STEP i++  DO
    ps:=ps+v1[i]*v2[i];
    RETURN ps ;
END
//algorithm produit scalaire
ALGORITHM orthogonality
VAR
    v1,v2 : ARRAY_OF FLOAT[50];
    ps:FLOAT:
    n:INTEGER
BEGIN
    IF (n%2=0) THEN
        read(n);
    ELSE
        writh("enter n pair of vectors");
    END_IF
    write("please enter n pair of vector");
    read(n);
    IF (ps:=DOT_Product(v1,v2,n):=0) THEN
        write("les deux vecteurs sont orthogonaux");
    ELSE
        write("les deux vecteurs ne sont pas orthogonaux");
    END_IF
END
